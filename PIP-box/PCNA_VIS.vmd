 ## Credits for these scripts go to:
 ## Axel Kohlmeyer
 ## Andrew Dalke
 ## Olaf Lenz

 color Display Background gray
 material change opacity Transparent 0.7
 display culling off
 display depthcue on
 display cuedensity 0.3
 display rendermode GLSL
 axes location off
 lappend rsnms GLY
 lappend rsnms ALA
 lappend rsnms VAL
 lappend rsnms LEU
 lappend rsnms ILE
 lappend rsnms SER
 lappend rsnms THR
 lappend rsnms CYS
 lappend rsnms PRO
 lappend rsnms PHE
 lappend rsnms TYR
 lappend rsnms TRP
 lappend rsnms HIP
 lappend rsnms HID
 lappend rsnms HIE
 lappend rsnms ASP
 lappend rsnms ASN
 lappend rsnms GLU
 lappend rsnms GLN
 lappend rsnms MET
 lappend rsnms LYS
 lappend rsnms ARG
 lappend rsnms ORN
 lappend rsnms AIB
 lappend rsnms PCA
 lappend rsnms ACE
 lappend rsnms FOR
 lappend rsnms NME
 lappend rsnms NH2
 lappend rsnms GAM
 lappend rsnms HYP
 lappend rsnms ABA
 lappend rsnms NVA
 lappend rsnms NLE
 lappend rsnms DAB
 lappend rsnms R5P
 lappend rsnms D5P
 lappend rsnms RPU
 lappend rsnms RPC
 lappend rsnms RPT
 lappend rsnms RPA
 lappend rsnms RPG
 lappend rsnms DPU
 lappend rsnms DPC
 lappend rsnms DPT
 lappend rsnms DPA
 lappend rsnms DPG
 lappend rsnms RIB
 lappend rsnms DIB
 lappend rsnms RIU
 lappend rsnms RIC
 lappend rsnms RIT
 lappend rsnms RIA
 lappend rsnms RIG
 lappend rsnms DIU
 lappend rsnms DIC
 lappend rsnms DIT
 lappend rsnms DIA
 lappend rsnms DIG
 lappend rsnms GLH
 lappend rsnms ASH
 lappend rsnms CYX
 lappend rsnms TYO
 lappend rsnms LYD
 lappend rsnms PTR
 lappend rsnms SEP
 lappend rsnms TPO
 lappend rsnms KAC
 lappend rsnms KM1
 lappend rsnms KM2
 lappend rsnms KM3

 set rep1 Licorice
 set rep2 NewCartoon
 set rep3 VdW
 set sel1 "resname $rsnms"
 set sel2 "resname $rsnms"
 set sel3 "(not resname $rsnms) and (not hydrogen)"
 set trjsm 0

 if { [glob -nocomplain PCNA_END.pdb ] \
 == "PCNA_END.pdb" } then \
 {set ftemplate "PCNA_END.pdb"} \
 else {set ftemplate "PCNA_START.pdb"}
 mol load pdb $ftemplate
 mol addfile PCNA_traj.xtc waitfor all
 mol modcolor 0 0 Type
 mol modstyle 0 0 $rep1
 mol modmaterial 0 0 Glossy
 mol modselect 0 0 $sel1
 mol addrep 0
 mol modstyle 1 0 $rep2
 mol modcolor 1 0 Index
 mol modselect 1 0 $sel2
 mol modmaterial 1 0 Transparent
 mol addrep 0
 mol modstyle 2 0 $rep3
 mol modcolor 2 0 Type
 mol modselect 2 0 $sel3
 mol modmaterial 2 0 Glossy

 set nreps [molinfo 0 get numreps]
 set nfrms [molinfo 0 get numframes]

 for {set i 0} {$i < $nreps} {incr i} {
   mol selupdate $i 0 on
   mol smoothrep 0 $i $trjsm
 }

 proc start_sscache {{molid 0}} {
   global sscache_data vmd_frame
   trace variable vmd_frame($molid) w sscache
   return
 }
 proc stop_sscache {{molid 0}} {
   global vmd_frame
   trace vdelete vmd_frame($molid) w sscache
   return
 }
 proc reset_sscache {} {
   global sscache_data
   if [info exists sscache_data] {
     unset sscache_data
   }
   return
 }
 proc sscache {name index op} {
   global sscache_data
   set sel [atomselect $index "protein name CA"]
   set frame [molinfo $index get frame]
   if [info exists sscache_data($index,$frame)] {
     $sel set structure $sscache_data($index,$frame)
   return
   }
   vmd_calculate_structure $index
   set sscache_data($index,$frame) [$sel get structure]
   return
 }

 proc align_it {{sel "protein"} {rfmol 0} {reffr 0} {molid 0}} {
   set alignref [atomselect $rfmol $sel frame $reffr]
   set nf [molinfo $molid get numframes]
   for {set i 0} {$i < $nf} {incr i} {
     set match [atomselect $molid $sel frame $i]
     set tm [measure fit $match $alignref]
     set alls [atomselect $molid "all" frame $i]
     $alls move $tm
   }
 }

 proc rmsd_it {{filen \
 PCNA_RMSD.dat} \
 {sel "protein"} {rfmol 0} {reffr 0} {molid 0}} {
   set fi [open $filen w]
   set alignref [atomselect $rfmol $sel frame $reffr]
   set refall [atomselect $rfmol "all" frame $reffr]
   set nf [molinfo $molid get numframes]
   for {set i 1} {$i < $nf} {incr i} {
     set match [atomselect $molid $sel frame $i]
     set tm [measure fit $match $alignref]
     set alls [atomselect $molid "all" frame $i]
     $alls move $tm
     set match [atomselect $molid $sel frame $i]
     set irmsd [measure rmsd $match $alignref]
     set alls [atomselect $molid "all" frame $i]
     set irmsd2 [measure rmsd $alls $refall]
     puts $fi "$i  $irmsd  $irmsd2"
   }
   close $fi
 }

 proc see_box {{rad 50.0} {ooa 0.0} \
 {oob 0.0} {ooc 0.0} {res 200}} {
   set radian [expr "180.0/3.14159265"];
  lappend gids [graphics 0 sphere \
  "$ooa $oob $ooc"\
  radius "$rad" resolution "$res"]
  return $gids
 }

 proc see_system {{molid 0}} {
   global box_gids
   if {[info exists box_gids]} then {
     foreach g $box_gids {
       graphics $molid delete $g
     }
   }
   graphics 0 color ochre
   graphics 0 material Glass1
   set box_prms "\
  220.000  \
    0.000     0.000     0.000  \
 "
   set box_gids [eval "see_box $box_prms" ]
 }

 proc hide_system {{molid 0}} {
   global box_gids
   if {[info exists box_gids]} then {
     foreach g $box_gids {
       graphics $molid delete $g
     }
   }
 }

 start_sscache 0

